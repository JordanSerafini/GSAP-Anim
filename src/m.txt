{
  ref: boxRef,
  x: 250,
  start: "top+=50 800", // start - scrollerStart
  end: "300 500",
  toggleActions: "play pause resume reset",
  markers: true,
  pin: true,
  pinSpacing: false,
  onUpdate: (self) => console.log("Progress:", self.progress),
  onEnter: () => console.log("Enter"),
  onLeave: () => console.log("Leave"),
  onEnterBack: () => console.log("Enter Back"),
  onLeaveBack: () => console.log("Leave Back"),
  id: "box-animation",
  once: false,
  toggleClass: "active",
  fastScrollEnd: true
}




  useEffect(() => {
    gsap.registerPlugin(ScrollTrigger);

    if (boxRef.current) {
      gsap.to(boxRef.current, {
        scrollTrigger: {
          trigger: boxRef.current,
          start: "top center",
          end: "top 100px",
          scrub: true,
          markers: true,
          toggleActions: "play reverse play reverse",
        },
        x: 400,
        rotation: 360,
        duration: 3
      });
    }
  }, []);

  

  useEffect(() => {
    // Crée une timeline
    const tl = gsap.timeline({ 
      repeat: -1, // Répète l'animation indéfiniment
      yoyo: true // Fait que l'animation se joue en arrière lors de la répétition pour un effet aller-retour
    });
  
    // Ajoute des animations à la timeline avec des durées différentes
    tl.to(boxRef.current, { x: 300, opacity: 0.5, duration: 2 }) // Se déplace sur l'axe X avec une durée de 2 secondes
      .to(boxRef.current, { y: -250, opacity: 1, duration: 3 }) // Ensuite, se déplace sur l'axe Y avec une durée de 3 secondes
      .to(boxRef.current, { x: 0, opacity: 0.5, duration: 1 }) // Revient à la position X initiale avec une durée de 1 seconde
      .to(boxRef.current, { y: 0, opacity: 1, duration: 0.5 }); // Revient à la position Y initiale avec une durée de 0.5 seconde
  }, []);

 

  useEffect(() => {
  
    // Crée une timeline avec ScrollTrigger
    gsap.timeline({
      scrollTrigger: {
        trigger: boxRef.current, // l'élément qui déclenche l'animation
        start: "top center", // Quand le haut de `trigger` atteint le centre du viewport
        end: "bottom top", // Quand le bas de `trigger` quitte le haut du viewport
        scrub: true, // Lisse l'animation et la lie au scroll
        markers: true, // Décommente pour voir les marqueurs de déclenchement (utile pour le débogage)
      }
    })
    .to(boxRef.current, { x: 100, opacity: 0.5, duration: 2 })
    .to(boxRef.current, { y: -75, opacity: 1, duration: 3 })
    .to(boxRef.current, { x: 0, opacity: 0.5, duration: 1 })
    .to(boxRef.current, { y: 0, opacity: 1, duration: 0.5 });
  }, []);
  
 
  
  useEffect(() => {
    
    const boxes = [boxRef, box2Ref, box3Ref];
    boxes.forEach((box, index) => {
      gsap.fromTo(box.current, 
        { x: 0, opacity: 0 }, 
        { x: 350, opacity: 1, duration: 1, delay: index * 0.8 });
    });
  }, []);
    */





    -------------------------------------------------------------------------------

    function App() {
  const boxRef = useRef(null);
  const box2Ref = useRef(null);
  const box3Ref = useRef(null);
  /*
  useEffect(() => {
    [boxRef, box2Ref, box3Ref].forEach((box, index) => {
      if (box.current) {
        gsap.fromTo(
          box.current,
          { x: 0, opacity: 0, marker: true }, // état de départ
          {
            x: 250, //+ index * 100,
            opacity: 1,
            duration: 2,
            scrollTrigger: {
              trigger: box.current,
              start: "top+=00 750", // premier start, second scroll start
              end: "200 525",
              scrub: true,
              markers: true,
              toggleActions: "play reverse play reverse",
            },
          }
        );
      }
    });
  }, []);
*/

  useEffect(() => {
    const boxAnimations = [
      {
        ref: boxRef,
        x: 250,
        start: "top+=50 800",// start - scrollerStart
        end: "300 500",
      },
      {
        ref: box2Ref,
        x: 350,
        start: "top+=120 900",
        end: "200 550",
      },
      {
        ref: box3Ref,
        x: 450,
        start: "top+=140 1000",
        end: "200 600",
      },
    ];

    boxAnimations.forEach((boxAnim) => {
      if (boxAnim.ref.current) {
        gsap.fromTo(
          boxAnim.ref.current,
          { x: 0, opacity: 0 }, // état de départ
          {
            x: boxAnim.x,
            opacity: 1,
            duration: boxAnim.duration,
            scrollTrigger: {
              trigger: boxAnim.ref.current,
              start: boxAnim.start,
              end: boxAnim.end,
              scrub: true,
              markers: true,
              toggleActions: "play reverse play reverse",
            },
          }
        );
      }
    });
  }, []);

  return (
    <div className="Body">
      <div className="Container">
        <div className="Box" ref={boxRef}>
          <p className="text">LOREM IPSUM DOLOR SIT AMET</p>
        </div>
        <div className="Box" ref={box2Ref}>
          <p className="text">LOREM IPSUM DOLOR SIT AMET</p>
        </div>
        <div className="Box" ref={box3Ref}>
          <p className="text">LOREM IPSUM DOLOR SIT AMET</p>
        </div>
      </div>
    </div>
  );
}



-------------------------------------------------------------------------------------